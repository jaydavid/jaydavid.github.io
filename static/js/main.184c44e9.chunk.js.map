{"version":3,"sources":["Header/HeaderBanner.tsx","Graphics/ScoreDistribution.tsx","Data/Sections.ts","Header/ReportHeader.tsx","Data/Overall.ts","Summary/OverallSummary.tsx","Summary/SectionSummary.tsx","Summary/Summary.tsx","Data/Text.ts","Data/Items.ts","Section/ItemsTable.tsx","Data/Highlights.ts","Section/Highlights.tsx","Data/Skills.ts","Graphics/ContentAreaBarGraph.tsx","Section/SkillsBreakdownTable.tsx","Section/SkillsBreakdown.tsx","Section/SectionDetails.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","background","position","marginBottom","content","left","top","width","height","borderLeft","borderRight","borderTop","clear","HeaderBanner","children","classes","Slide","direction","in","timeout","Box","className","Container","ScoreDistribution","margin","bottom","right","leftLabel","rightLabel","score","percentage","textColor","textSize","contentHeight","contentWidth","calcY","x","Math","E","sqrt","PI","f","points","Array","map","_","getPercentageX","p","useState","renderedPercentage","setRenderedPercentage","useEffect","setTimeout","min","clearTimeout","viewBox","y","fontSize","fill","textAnchor","transform","d","filter","i","join","stroke","strokeWidth","cx","cy","r","x1","y1","x2","y2","strokeDasharray","SectionResults","id","name","minScaledScore","maxScaledScore","scaledScore","totalQuestions","questionsCorrect","incomplete","averageQuestionTimeInSeconds","flaggedCorrect","flaggedIncorrect","header","color","paddingBottom","textAlign","headerTitle","padding","scoreComponent","maxWidth","marginLeft","marginRight","verticalStack","display","flexDirection","horizontalStack","even","justifyContent","spread","overallLabel","navButton","cursor","textDecoration","ReportHeader","onNavigate","Typography","variant","section","toString","onClick","OverallDataKey","OverallResults","percent","timeSpentInSeconds","dateAttempted","detailsGrid","detailCard","verticalAlign","minWidth","scoreCurve","marginTop","OverallSummary","Grid","container","justify","alignItems","item","Card","CardContent","moment","utc","duration","asMilliseconds","format","Date","toLocaleDateString","SectionSummary","Table","TableHead","TableRow","TableCell","TableBody","Link","Summary","lorem","LoremIpsum","sentencesPerParagraph","max","wordsPerSentence","Identifier","length","result","characters","charactersLength","charAt","floor","random","Sentence","number","generateSentences","formatted","text","bold","italic","underline","spans","words","split","index","spanLength","spanStart","spanEnd","span","slice","roll","push","ItemData","correct","timeInSeconds","flagged","preview","this","substr","createItems","count","items","ItemResults","ItemsTable","sectionId","itemData","ItemHighlight","highlights","createHighlight","maxItemNumber","paragraphRange","sentenceRange","highlightsRange","generateParagraphHighlight","paragraphIndex","generateParagraphs","FormattedParagraph","ceil","generateSentenceHighlight","FormattedSentence","generateHighlight","createItemHighlights","maxItem","sort","a","b","CandidateHighlights","itemHighlight","itemHighlightHeader","highlightContent","paddingTop","Highlights","itemHighlights","h","Paper","elevation","highlight","dangerouslySetInnerHTML","__html","SkillGroup","label","description","skills","SkillData","SkillsGroups","ContentAreaBarGraph","segmentMargin","skill","segmentWidth","segmentContentWidth","segmentHeight","val","acronym","centered","SkillsBreakdownTable","skillsGroup","graphContainer","borderBottom","mainLabel","SkillsBreakdown","group","backNavigation","SectionDetails","React","tab","setTab","Button","Tabs","value","onChange","event","newValue","Tab","App","viewing","setViewing","to","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.184c44e9.chunk.js","sourcesContent":["import { Box, Container, makeStyles, Slide } from \"@material-ui/core\";\r\nimport React, { FunctionComponent } from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    background: \"#402B56\",\r\n    position: \"relative\",\r\n    marginBottom: 55,\r\n    \"&::after\": {\r\n      content: '\"\"',\r\n      position: \"absolute\",\r\n      left: \"calc(50% - 100px)\",\r\n      top: \"100%\",\r\n      width: 0,\r\n      height: 0,\r\n      borderLeft: \"100px solid transparent\",\r\n      borderRight: \"100px solid transparent\",\r\n      borderTop: \"50px solid #402b56\",\r\n      clear: \"both\",\r\n    },\r\n  },\r\n});\r\n\r\nexport const HeaderBanner: FunctionComponent = ({ children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Slide direction=\"down\" in={true} timeout={500}>\r\n      <Box className={classes.root}>\r\n        <Container>\r\n          <Box>{children}</Box>\r\n        </Container>\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nexport interface ScoreDistributionProperties {\r\n  height: number;\r\n  width: number;\r\n  margin?: { top: number; left: number; bottom: number; right: number };\r\n  leftLabel?: string;\r\n  rightLabel?: string;\r\n  score?: string;\r\n  percentage: number;\r\n  textColor?: string;\r\n  textSize?: string;\r\n}\r\n\r\nexport const ScoreDistribution = ({\r\n  height,\r\n  width,\r\n  margin = { top: 10, left: 10, bottom: 10, right: 10 },\r\n  leftLabel = \"\",\r\n  rightLabel = \"\",\r\n  score = \"\",\r\n  percentage,\r\n  textColor = \"black\",\r\n  textSize = \"large\",\r\n}: ScoreDistributionProperties) => {\r\n  const contentHeight = height - (margin.top + margin.bottom);\r\n  const contentWidth = width - (margin.left + margin.right);\r\n\r\n  const mean = 0;\r\n  const stDev = 1;\r\n  const scaleMin = -2.75;\r\n  const scaleMax = 2.75;\r\n\r\n  const f = (x: number) =>\r\n    Math.E ** -((x - mean) ** 2 / (2 * stDev ** 2)) /\r\n    (stDev * Math.sqrt(2 * Math.PI));\r\n\r\n  const scale = (i: number) =>\r\n    (i * (scaleMax - scaleMin)) / contentWidth + scaleMin;\r\n\r\n  const calcY = (x: number) => contentHeight - f(scale(x)) * contentHeight * 2;\r\n\r\n  const points = [...new Array(contentWidth)].map((_, x) => calcY(x));\r\n\r\n  const getPercentageX = (p: number) => contentWidth * (p / 100);\r\n  const [renderedPercentage, setRenderedPercentage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let timeout = setTimeout(\r\n      () => setRenderedPercentage(Math.min(renderedPercentage + 1, percentage)),\r\n      percentage - renderedPercentage > 10 ? 10 : 20\r\n    );\r\n    return () => clearTimeout(timeout);\r\n  }, [percentage, renderedPercentage]);\r\n\r\n  return (\r\n    <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\r\n      <text x={5} y={height - 5} fontSize={textSize} fill={textColor}>\r\n        {leftLabel}\r\n      </text>\r\n      <text\r\n        x={width - 5}\r\n        y={height - 5}\r\n        fontSize={textSize}\r\n        textAnchor=\"end\"\r\n        fill={textColor}\r\n      >\r\n        {rightLabel}\r\n      </text>\r\n      <g transform={`translate(${margin.left} ${margin.top})`}>\r\n        <path\r\n          d={`M 0 0 ${points\r\n            .filter((_, i) => i < getPercentageX(renderedPercentage))\r\n            .map((p, i) => `L ${i} ${p}`)\r\n            .join(\" \")} L ${getPercentageX(renderedPercentage)} ${calcY(\r\n            getPercentageX(renderedPercentage)\r\n          )} L ${getPercentageX(\r\n            renderedPercentage\r\n          )} ${contentHeight} L 0 ${contentHeight}`}\r\n          stroke=\"none\"\r\n          fill=\"#F8B332\"\r\n        />\r\n        <path\r\n          d={`M 0 ${points[0]} ${points\r\n            .map((p, i) => `L ${i} ${p}`)\r\n            .join(\" \")}`}\r\n          fill=\"none\"\r\n          stroke=\"black\"\r\n          strokeWidth={2}\r\n        />\r\n        <circle\r\n          cx={getPercentageX(renderedPercentage)}\r\n          cy={calcY(getPercentageX(renderedPercentage)) - 5}\r\n          r={5}\r\n          fill=\"red\"\r\n          stroke=\"none\"\r\n        />\r\n        <line\r\n          x1={getPercentageX(renderedPercentage)}\r\n          y1={contentHeight}\r\n          x2={getPercentageX(renderedPercentage)}\r\n          y2={calcY(getPercentageX(renderedPercentage))}\r\n          stroke=\"red\"\r\n          strokeDasharray={2}\r\n        />\r\n        {renderedPercentage >= percentage && (\r\n          <text\r\n            x={getPercentageX(renderedPercentage)}\r\n            y={calcY(getPercentageX(renderedPercentage)) - 15}\r\n            textAnchor=\"middle\"\r\n            fontSize={textSize}\r\n            fill={textColor}\r\n          >\r\n            {score}\r\n          </text>\r\n        )}\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n","export interface SectionData {\r\n  id: string;\r\n  name: string;\r\n  minScaledScore: number;\r\n  maxScaledScore: number;\r\n  scaledScore: number;\r\n  percentage: number;\r\n  totalQuestions: number;\r\n  questionsCorrect: number;\r\n  incomplete: number;\r\n  averageQuestionTimeInSeconds: number;\r\n  flaggedCorrect: number;\r\n  flaggedIncorrect: number;\r\n}\r\n\r\nexport const SectionResults: Array<SectionData> = [\r\n  {\r\n    id: \"CPFBS\",\r\n    name: \"Chemical and Physical Foundations of Biological Systems\",\r\n    minScaledScore: 118,\r\n    maxScaledScore: 132,\r\n    scaledScore: 127,\r\n    percentage: 85,\r\n    totalQuestions: 59,\r\n    questionsCorrect: 43,\r\n    incomplete: 2,\r\n    averageQuestionTimeInSeconds: 52,\r\n    flaggedCorrect: 15,\r\n    flaggedIncorrect: 3,\r\n  },\r\n  {\r\n    id: \"CARS\",\r\n    name: \"Critical Analysis and Reasoning Skills\",\r\n    minScaledScore: 118,\r\n    maxScaledScore: 132,\r\n    scaledScore: 125,\r\n    percentage: 50,\r\n    totalQuestions: 53,\r\n    questionsCorrect: 30,\r\n    incomplete: 10,\r\n    averageQuestionTimeInSeconds: 72,\r\n    flaggedCorrect: 5,\r\n    flaggedIncorrect: 12,\r\n  },\r\n  {\r\n    id: \"BBFLS\",\r\n    name: \"Biological and Biomechanical Foundations of Living Systems\",\r\n    minScaledScore: 118,\r\n    maxScaledScore: 132,\r\n    scaledScore: 128,\r\n    percentage: 83,\r\n    totalQuestions: 59,\r\n    questionsCorrect: 48,\r\n    incomplete: 0,\r\n    averageQuestionTimeInSeconds: 81,\r\n    flaggedCorrect: 0,\r\n    flaggedIncorrect: 1,\r\n  },\r\n  {\r\n    id: \"PSBFB\",\r\n    name: \"Psychological, Social, and Biological Foundations of Behavior\",\r\n    minScaledScore: 118,\r\n    maxScaledScore: 132,\r\n    scaledScore: 129,\r\n    percentage: 87,\r\n    totalQuestions: 59,\r\n    questionsCorrect: 49,\r\n    incomplete: 0,\r\n    averageQuestionTimeInSeconds: 43,\r\n    flaggedCorrect: 0,\r\n    flaggedIncorrect: 0,\r\n  },\r\n];\r\n","import { Box, makeStyles, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport { HeaderBanner } from \"./HeaderBanner\";\r\nimport { ScoreDistribution } from \"../Graphics/ScoreDistribution\";\r\nimport { SectionResults } from \"../Data/Sections\";\r\n\r\nconst useStyles = makeStyles({\r\n  header: {\r\n    color: \"white\",\r\n    paddingBottom: 20,\r\n    textAlign: \"center\",\r\n  },\r\n  headerTitle: {\r\n    padding: 25,\r\n  },\r\n  scoreComponent: {\r\n    maxWidth: 250,\r\n    \"& svg\": {\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n  },\r\n  verticalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  horizontalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  even: {\r\n    justifyContent: \"space-around\",\r\n  },\r\n  spread: {\r\n    justifyContent: \"space-between\",\r\n  },\r\n  overallLabel: {\r\n    textAlign: \"center\",\r\n  },\r\n  navButton: {\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n\r\nexport interface ReportHeaderProperties {\r\n  onNavigate: (to: string) => void;\r\n}\r\n\r\nexport const ReportHeader = ({ onNavigate }: ReportHeaderProperties) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <HeaderBanner>\r\n      <Box className={`${classes.header} ${classes.verticalStack}`}>\r\n        <Typography variant=\"h4\" className={classes.headerTitle}>\r\n          MCAT Practice Exam Results\r\n        </Typography>\r\n        <Box className={`${classes.horizontalStack} ${classes.even}`}>\r\n          {SectionResults.map((section) => (\r\n            <Box\r\n              key={section.id}\r\n              className={`${classes.scoreComponent} ${classes.verticalStack}`}\r\n            >\r\n              <ScoreDistribution\r\n                height={125}\r\n                width={200}\r\n                margin={{ top: 10, left: 10, bottom: 20, right: 10 }}\r\n                leftLabel={section.minScaledScore.toString()}\r\n                rightLabel={section.maxScaledScore.toString()}\r\n                score={section.scaledScore.toString()}\r\n                percentage={section.percentage}\r\n                textColor=\"white\"\r\n                textSize=\"default\"\r\n              />\r\n              <Typography\r\n                onClick={() => onNavigate(section.id)}\r\n                className={classes.navButton}\r\n              >\r\n                {section.name}\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </HeaderBanner>\r\n  );\r\n};\r\n","export const OverallDataKey = \"summary\";\r\nexport interface OverallData {\r\n  minScaledScore: number;\r\n  maxScaledScore: number;\r\n  scaledScore: number;\r\n  percent: number;\r\n  totalQuestions: number;\r\n  questionsCorrect: number;\r\n  timeSpentInSeconds: number;\r\n  dateAttempted: number;\r\n}\r\n\r\nexport const OverallResults: OverallData = {\r\n  minScaledScore: 472,\r\n  maxScaledScore: 528,\r\n  scaledScore: 511,\r\n  percent: 82,\r\n  totalQuestions: 230,\r\n  questionsCorrect: 201,\r\n  timeSpentInSeconds: 14200,\r\n  dateAttempted: 1612293247790,\r\n};\r\n","import {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  makeStyles,\r\n  Slide,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { OverallResults } from \"../Data/Overall\";\r\n\r\nimport { ScoreDistribution } from \"../Graphics/ScoreDistribution\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginBottom: 20,\r\n  },\r\n  verticalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  horizontalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  even: {\r\n    justifyContent: \"space-around\",\r\n  },\r\n  spread: {\r\n    justifyContent: \"space-between\",\r\n  },\r\n  overallLabel: {\r\n    textAlign: \"center\",\r\n  },\r\n  detailsGrid: {\r\n    marginLeft: 25,\r\n  },\r\n  detailCard: {\r\n    textAlign: \"center\",\r\n    verticalAlign: \"middle\",\r\n    margin: 10,\r\n    minWidth: 210,\r\n  },\r\n  scoreCurve: {\r\n    marginTop: \"auto\",\r\n    marginBottom: \"auto\",\r\n  },\r\n});\r\n\r\nexport const OverallSummary = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box\r\n      className={`${classes.root} ${classes.horizontalStack} ${classes.spread}`}\r\n    >\r\n      <Box className={`${classes.verticalStack} ${classes.scoreCurve}`}>\r\n        <Typography variant=\"h4\" className={classes.overallLabel}>\r\n          Overall Scaled Score\r\n        </Typography>\r\n        <ScoreDistribution\r\n          height={250}\r\n          width={500}\r\n          margin={{ top: 10, left: 10, bottom: 20, right: 10 }}\r\n          leftLabel={OverallResults.minScaledScore.toString()}\r\n          rightLabel={OverallResults.maxScaledScore.toString()}\r\n          score={OverallResults.scaledScore.toString()}\r\n          percentage={OverallResults.percent}\r\n        />\r\n      </Box>\r\n      <Slide direction=\"left\" in={true} timeout={500}>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          className={classes.detailsGrid}\r\n        >\r\n          <Grid item>\r\n            <Card variant=\"outlined\" className={classes.detailCard}>\r\n              <CardContent>\r\n                <Typography variant=\"h4\">{OverallResults.percent}%</Typography>\r\n                <Typography variant=\"subtitle2\">Percentile Rank</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item>\r\n            <Card variant=\"outlined\" className={classes.detailCard}>\r\n              <CardContent>\r\n                <Typography variant=\"h4\">\r\n                  {OverallResults.questionsCorrect} of{\" \"}\r\n                  {OverallResults.totalQuestions}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\">Questions Correct</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item>\r\n            <Card variant=\"outlined\" className={classes.detailCard}>\r\n              <CardContent>\r\n                <Typography variant=\"h4\">\r\n                  {moment\r\n                    .utc(\r\n                      moment\r\n                        .duration(OverallResults.timeSpentInSeconds, \"seconds\")\r\n                        .asMilliseconds()\r\n                    )\r\n                    .format(\"hh:mm:ss\")}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\">Time Spent</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item>\r\n            <Card variant=\"outlined\" className={classes.detailCard}>\r\n              <CardContent>\r\n                <Typography variant=\"h4\">\r\n                  {new Date(OverallResults.dateAttempted).toLocaleDateString()}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\">Attempt Date</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    </Box>\r\n  );\r\n};\r\n","import {\r\n  Grid,\r\n  Link,\r\n  makeStyles,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport FlagIcon from \"@material-ui/icons/Flag\";\r\nimport { SectionResults } from \"../Data/Sections\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"& td:not(:first-child)\": {\r\n      textAlign: \"center\",\r\n    },\r\n    \"& a\": {\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n});\r\n\r\nexport interface SectionSummaryProperties {\r\n  onNavigate: (to: string) => void;\r\n}\r\n\r\nexport const SectionSummary = ({ onNavigate }: SectionSummaryProperties) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.root}>\r\n      <Grid item>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Section</TableCell>\r\n              <TableCell>Score</TableCell>\r\n              <TableCell>Percentile</TableCell>\r\n              <TableCell>Correct</TableCell>\r\n              <TableCell>Incomplete</TableCell>\r\n              <TableCell>Average TPQ</TableCell>\r\n              <TableCell>\r\n                <FlagIcon /> Correct\r\n              </TableCell>\r\n              <TableCell>\r\n                <FlagIcon /> Incorrect\r\n              </TableCell>\r\n              <TableCell></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {SectionResults.map((section) => (\r\n              <TableRow key={section.id}>\r\n                <TableCell>\r\n                  <Link onClick={() => onNavigate(section.id)}>\r\n                    {section.name}\r\n                  </Link>\r\n                </TableCell>\r\n                <TableCell>{section.scaledScore}</TableCell>\r\n                <TableCell>{section.percentage}</TableCell>\r\n                <TableCell>\r\n                  {section.questionsCorrect} of {section.totalQuestions}\r\n                </TableCell>\r\n                <TableCell>{section.incomplete}</TableCell>\r\n                <TableCell>\r\n                  {moment\r\n                    .utc(\r\n                      moment\r\n                        .duration(\r\n                          section.averageQuestionTimeInSeconds,\r\n                          \"seconds\"\r\n                        )\r\n                        .asMilliseconds()\r\n                    )\r\n                    .format(\"m:ss\")}\r\n                </TableCell>\r\n                <TableCell>{section.flaggedCorrect}</TableCell>\r\n                <TableCell>{section.flaggedIncorrect}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { OverallSummary } from \"./OverallSummary\";\r\nimport { SectionSummary } from \"./SectionSummary\";\r\n\r\nexport interface SummaryProperties {\r\n  onNavigate: (to: string) => void;\r\n}\r\n\r\nexport const Summary = ({ onNavigate }: SummaryProperties) => {\r\n  return (\r\n    <Box>\r\n      <OverallSummary />\r\n      <SectionSummary onNavigate={onNavigate} />\r\n    </Box>\r\n  );\r\n};\r\n","import { LoremIpsum } from \"lorem-ipsum\";\r\n\r\nconst lorem = new LoremIpsum({\r\n  sentencesPerParagraph: {\r\n    max: 8,\r\n    min: 4,\r\n  },\r\n  wordsPerSentence: {\r\n    max: 32,\r\n    min: 8,\r\n  },\r\n});\r\n\r\nexport const Identifier = (length: number) => {\r\n  let result = \"\";\r\n  let characters =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  let charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const Word = (number?: number) => lorem.generateWords(number);\r\nexport const Sentence = (number?: number) => lorem.generateSentences(number);\r\nexport const Paragraph = (number: number) => lorem.generateParagraphs(number);\r\n\r\nconst formatted = (text: string) => {\r\n  const maxSpan = 13;\r\n  const bold = [0, 0.1];\r\n  const italic = [0.09, 0.12];\r\n  const underline = [0.1, 0.18];\r\n\r\n  let spans = [];\r\n  let words = text.split(\" \");\r\n  let index = 0;\r\n  while (index < words.length) {\r\n    let spanLength = Math.random() * maxSpan + 1;\r\n    let spanStart = index;\r\n    let spanEnd = Math.min(words.length - 1, index + spanLength);\r\n    index = spanEnd + 1;\r\n    let span = words.slice(spanStart, spanEnd).join(\" \");\r\n\r\n    let roll = Math.random();\r\n    if (roll >= bold[0] && roll <= bold[1]) span = `<b>${span}</b>`;\r\n    if (roll >= italic[0] && roll <= italic[1]) span = `<i>${span}</i>`;\r\n    if (roll >= underline[0] && roll <= underline[1]) span = `<u>${span}</u>`;\r\n\r\n    spans.push(span);\r\n  }\r\n\r\n  return spans.join(\" \");\r\n};\r\n\r\nexport const FormattedSentence = (number: number) => {\r\n  let spans = [];\r\n\r\n  for (let paragraphIndex = 0; paragraphIndex < number; paragraphIndex++)\r\n    spans.push(`<span>${formatted(lorem.generateSentences(1))}</span>`);\r\n\r\n  return spans.join(\" \");\r\n};\r\n\r\nexport const FormattedParagraph = (number: number) => {\r\n  let spans = [];\r\n\r\n  for (let paragraphIndex = 0; paragraphIndex < number; paragraphIndex++)\r\n    spans.push(`<p>${formatted(lorem.generateParagraphs(1))}</p>`);\r\n\r\n  return spans.join(\" \");\r\n};\r\n","import { Sentence } from \"./Text\";\r\n\r\nconst previewLength = 250;\r\n\r\nexport class ItemData {\r\n  public preview: string;\r\n\r\n  constructor(\r\n    public number: number,\r\n    public section: string,\r\n    public correct: boolean,\r\n    public timeInSeconds: number,\r\n    public flagged: boolean\r\n  ) {\r\n    this.preview = `${Sentence(2).substr(0, previewLength)}...`;\r\n  }\r\n}\r\n\r\nconst createItems = (count: number, section: string) => {\r\n  let items = [];\r\n  for (let number = 1; number <= count; number++)\r\n    items.push(\r\n      new ItemData(\r\n        number,\r\n        section,\r\n        Math.random() >= 0.25,\r\n        Math.random() * 360,\r\n        Math.random() >= 0.85\r\n      )\r\n    );\r\n  return items;\r\n};\r\n\r\nexport const ItemResults: Array<ItemData> = [\r\n  ...createItems(59, \"CPFBS\"),\r\n  ...createItems(53, \"CARS\"),\r\n  ...createItems(59, \"BBFLS\"),\r\n  ...createItems(59, \"PSBFB\"),\r\n];\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport FlagIcon from \"@material-ui/icons/Flag\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport moment from \"moment\";\r\nimport { ItemResults } from \"../Data/Items\";\r\n\r\nexport interface ItemsTableProperties {\r\n  sectionId: string;\r\n}\r\n\r\nexport const ItemsTable = ({ sectionId }: ItemsTableProperties) => {\r\n  const itemData = ItemResults.filter((i) => i.section === sectionId);\r\n\r\n  return (\r\n    <Table>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>\r\n            <Typography>#</Typography>\r\n          </TableCell>\r\n          <TableCell>\r\n            <CheckIcon />\r\n          </TableCell>\r\n          <TableCell>\r\n            <Typography>Preview</Typography>\r\n          </TableCell>\r\n          <TableCell>\r\n            <Typography>Time</Typography>\r\n          </TableCell>\r\n          <TableCell>\r\n            <FlagIcon />\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {itemData.map((item) => (\r\n          <TableRow key={item.number}>\r\n            <TableCell>\r\n              <Typography>{item.number}</Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              {item.correct ? <CheckIcon /> : <ClearIcon />}\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography>{item.preview}</Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography>\r\n                {moment\r\n                  .utc(\r\n                    moment\r\n                      .duration(item.timeInSeconds, \"seconds\")\r\n                      .asMilliseconds()\r\n                  )\r\n                  .format(\"m:ss\")}\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>{item.flagged && <FlagIcon />}</TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n","import { FormattedParagraph, FormattedSentence } from \"./Text\";\r\n\r\nexport class ItemHighlight {\r\n  constructor(\r\n    public number: number,\r\n    public section: string,\r\n    public highlights: Array<string>\r\n  ) {}\r\n}\r\n\r\nconst createHighlight = (maxItemNumber: number, section: string) => {\r\n  const paragraphRange = [1, 2];\r\n  const sentenceRange = [2, 5];\r\n  const highlightsRange = [1, 3];\r\n\r\n  const generateParagraphHighlight = () =>\r\n    FormattedParagraph(\r\n      Math.max(paragraphRange[0], Math.ceil(Math.random() * paragraphRange[1]))\r\n    );\r\n  const generateSentenceHighlight = () =>\r\n    FormattedSentence(\r\n      Math.max(sentenceRange[0], Math.ceil(Math.random() * sentenceRange[1]))\r\n    );\r\n  const generateHighlight = () =>\r\n    Math.random() >= 0.5\r\n      ? generateParagraphHighlight()\r\n      : generateSentenceHighlight();\r\n  const generateHighlights = () =>\r\n    [\r\n      ...new Array(\r\n        highlightsRange[0] + Math.floor(Math.random() * highlightsRange[1])\r\n      ),\r\n    ].map(generateHighlight);\r\n\r\n  let item = Math.ceil(Math.random() * (maxItemNumber - 1));\r\n\r\n  return new ItemHighlight(item, section, generateHighlights());\r\n};\r\n\r\nconst createItemHighlights = (\r\n  number: number,\r\n  maxItem: number,\r\n  section: string\r\n) =>\r\n  [...new Array(number)]\r\n    .map(() => createHighlight(maxItem, section))\r\n    .sort((a, b) => a.number - b.number);\r\n\r\nexport const CandidateHighlights: Array<ItemHighlight> = [\r\n  ...createItemHighlights(5, 59, \"CPFBS\"),\r\n  ...createItemHighlights(2, 53, \"CARS\"),\r\n  ...createItemHighlights(7, 59, \"BBFLS\"),\r\n  ...createItemHighlights(4, 59, \"PSBFB\"),\r\n];\r\n","import { Box, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { CandidateHighlights } from \"../Data/Highlights\";\r\n\r\nconst useStyles = makeStyles({\r\n  itemHighlight: {\r\n    padding: 15,\r\n    marginBottom: 15,\r\n  },\r\n  itemHighlightHeader: {\r\n    margin: 5,\r\n  },\r\n  highlightContent: {\r\n    borderLeft: \"3px solid #F8B332\",\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n    marginLeft: 25,\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n  },\r\n});\r\n\r\nexport interface HighlightsProperties {\r\n  sectionId: string;\r\n}\r\n\r\nexport const Highlights = ({ sectionId }: HighlightsProperties) => {\r\n  const classes = useStyles();\r\n  const itemHighlights = CandidateHighlights.filter(\r\n    (h) => h.section === sectionId\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {itemHighlights.map((itemHighlight) => (\r\n        <Paper\r\n          elevation={3}\r\n          key={`item-${itemHighlight.number}`}\r\n          className={classes.itemHighlight}\r\n        >\r\n          <Typography variant=\"h6\" className={classes.itemHighlightHeader}>\r\n            Item {itemHighlight.number}\r\n          </Typography>\r\n          {itemHighlight.highlights.map((highlight, index) => (\r\n            <Box key={index} className={classes.highlightContent}>\r\n              <blockquote\r\n                dangerouslySetInnerHTML={{ __html: highlight }}\r\n              ></blockquote>\r\n            </Box>\r\n          ))}\r\n        </Paper>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import { Identifier, Sentence } from \"./Text\";\r\n\r\nexport class SkillGroup {\r\n  public label: string;\r\n  public description: string;\r\n  public skills: Array<SkillData>;\r\n  constructor() {\r\n    this.label = Identifier(3);\r\n    this.description = Sentence(2);\r\n    this.skills = [...new Array(3 + Math.ceil(Math.random() * 2))].map(\r\n      () => new SkillData()\r\n    );\r\n  }\r\n}\r\n\r\nexport class SkillData {\r\n  public correct: number;\r\n  public label: string;\r\n  public description: string;\r\n  public items: number;\r\n  constructor() {\r\n    this.label = Identifier(4);\r\n    this.description = Sentence(1);\r\n    this.items = Math.ceil(Math.random() * 15);\r\n    this.correct =\r\n      Math.floor(this.items / 2) + Math.floor(Math.random() * (this.items / 2));\r\n  }\r\n}\r\n\r\nexport const SkillsGroups: Array<SkillGroup> = [\r\n  ...new Array(3 + Math.ceil(Math.random() * 2)),\r\n].map(() => new SkillGroup());\r\n","import React from \"react\";\r\n\r\nexport interface ContentAreaBarGraphProperties {\r\n  width: number;\r\n  height: number;\r\n  margin?: { top: number; left: number; bottom: number; right: number };\r\n  segmentMargin?: { left: number; right: number };\r\n  skills: Array<{ label: string; items: number; correct: number }>;\r\n}\r\n\r\nexport const ContentAreaBarGraph = ({\r\n  width,\r\n  height,\r\n  margin = { top: 10, left: 10, bottom: 50, right: 10 },\r\n  segmentMargin = { left: 5, right: 5 },\r\n  skills,\r\n}: ContentAreaBarGraphProperties) => {\r\n  const contentHeight = height - (margin.top + margin.bottom);\r\n  const contentWidth = width - (margin.left + margin.right);\r\n\r\n  const max = Math.max(...skills.map((skill) => skill.items));\r\n  const segmentWidth = contentWidth / skills.length;\r\n  const segmentContentWidth =\r\n    segmentWidth - (segmentMargin.left + segmentMargin.right);\r\n  const segmentHeight = (val: number) => (contentHeight / max) * val;\r\n\r\n  return (\r\n    <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\r\n      <g transform={`translate(${margin.left},${margin.top})`}>\r\n        {skills.map((skill, index) => (\r\n          <g key={index}>\r\n            <rect\r\n              fill=\"lightyellow\"\r\n              stroke=\"black\"\r\n              strokeDasharray={4}\r\n              y={contentHeight - segmentHeight(skill.items)}\r\n              x={segmentWidth * index + segmentMargin.left}\r\n              width={segmentContentWidth}\r\n              height={segmentHeight(skill.items)}\r\n            />\r\n            <rect\r\n              fill=\"#F8B332\"\r\n              stroke=\"black\"\r\n              strokeWidth={2}\r\n              y={contentHeight - segmentHeight(skill.correct)}\r\n              x={segmentWidth * index + segmentMargin.left}\r\n              width={segmentContentWidth}\r\n              height={segmentHeight(skill.correct)}\r\n            />\r\n            <text\r\n              x={\r\n                segmentWidth * index +\r\n                segmentMargin.left +\r\n                segmentContentWidth / 2\r\n              }\r\n              y={contentHeight + 15}\r\n              textAnchor=\"middle\"\r\n            >\r\n              {skill.label}\r\n            </text>\r\n          </g>\r\n        ))}\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n","import {\r\n  makeStyles,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n  acronym: {\r\n    width: \"10%\",\r\n  },\r\n  description: {},\r\n  items: {\r\n    textAlign: \"center\",\r\n    width: \"10%\",\r\n  },\r\n  correct: {\r\n    textAlign: \"center\",\r\n    width: \"10%\",\r\n  },\r\n  centered: {\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport interface SkillsBreakdownTableProperties {\r\n  skills: Array<{\r\n    label: string;\r\n    description: string;\r\n    items: number;\r\n    correct: number;\r\n  }>;\r\n}\r\n\r\nexport const SkillsBreakdownTable = ({\r\n  skills,\r\n}: SkillsBreakdownTableProperties) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Table>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell className={classes.acronym}>\r\n            <Typography>Acronym</Typography>\r\n          </TableCell>\r\n          <TableCell className={classes.description}>\r\n            <Typography>Description</Typography>\r\n          </TableCell>\r\n          <TableCell className={classes.items}>\r\n            <Typography>Items</Typography>\r\n          </TableCell>\r\n          <TableCell className={classes.correct}>\r\n            <Typography>Correct</Typography>\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {skills.map((skill, index) => (\r\n          <TableRow key={index}>\r\n            <TableCell>\r\n              <Typography>{skill.label}</Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography>{skill.description}</Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography className={classes.centered}>\r\n                {skill.items}\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography className={classes.centered}>\r\n                {skill.correct}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n","import { Box, makeStyles, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { SkillsGroups } from \"../Data/Skills\";\r\nimport { ContentAreaBarGraph } from \"../Graphics/ContentAreaBarGraph\";\r\nimport { SkillsBreakdownTable } from \"./SkillsBreakdownTable\";\r\n\r\nconst useStyles = makeStyles({\r\n  verticalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  horizontalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  skillsGroup: {\r\n    marginTop: 15,\r\n    marginBottom: 15,\r\n  },\r\n  graphContainer: {\r\n    marginTop: \"auto\",\r\n    marginBottom: \"auto\",\r\n  },\r\n  overallLabel: {\r\n    marginTop: 30,\r\n    paddingBottom: 10,\r\n    borderBottom: \"1px solid lightgray\",\r\n  },\r\n  mainLabel: {\r\n    marginTop: \"auto\",\r\n    marginBottom: \"auto\",\r\n    marginLeft: 30,\r\n    marginRight: 30,\r\n  },\r\n});\r\n\r\nexport const SkillsBreakdown = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box>\r\n      {SkillsGroups.map((group, index) => (\r\n        <Box\r\n          key={index}\r\n          className={`${classes.verticalStack} ${classes.skillsGroup}`}\r\n        >\r\n          {group.label && (\r\n            <Box\r\n              className={`${classes.horizontalStack} ${classes.overallLabel}`}\r\n            >\r\n              <Typography\r\n                variant=\"h4\"\r\n                display=\"inline\"\r\n                className={classes.mainLabel}\r\n              >\r\n                {group.label}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" display=\"inline\">\r\n                {group.description}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          <Box className={classes.horizontalStack}>\r\n            <Box\r\n              className={`${classes.verticalStack} ${classes.graphContainer}`}\r\n            >\r\n              <ContentAreaBarGraph\r\n                width={300}\r\n                height={300}\r\n                margin={{ top: 50, left: 10, bottom: 50, right: 10 }}\r\n                skills={group.skills}\r\n              />\r\n            </Box>\r\n            <SkillsBreakdownTable skills={group.skills} />\r\n          </Box>\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  makeStyles,\r\n  Slide,\r\n  Tab,\r\n  Tabs,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport FlagIcon from \"@material-ui/icons/Flag\";\r\nimport { OverallDataKey } from \"../Data/Overall\";\r\nimport { SectionData } from \"../Data/Sections\";\r\nimport { ScoreDistribution } from \"../Graphics/ScoreDistribution\";\r\nimport { ItemsTable } from \"./ItemsTable\";\r\nimport { Highlights } from \"./Highlights\";\r\nimport { SkillsBreakdown } from \"./SkillsBreakdown\";\r\n\r\nconst useStyles = makeStyles({\r\n  verticalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  horizontalStack: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  backNavigation: {\r\n    marginTop: -50,\r\n  },\r\n  detailCard: {\r\n    textAlign: \"center\",\r\n    verticalAlign: \"middle\",\r\n    margin: 10,\r\n    minWidth: 210,\r\n  },\r\n  scoreCurve: {\r\n    \"& svg\": {\r\n      margin: \"auto\",\r\n    },\r\n  },\r\n});\r\n\r\nexport interface SectionDetailsProperties {\r\n  onNavigate: (to: string) => void;\r\n  section: SectionData;\r\n}\r\n\r\nexport const SectionDetails = ({\r\n  onNavigate,\r\n  section,\r\n}: SectionDetailsProperties) => {\r\n  const classes = useStyles();\r\n  const [tab, setTab] = React.useState(0);\r\n\r\n  const onTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setTab(newValue);\r\n  };\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => onNavigate(OverallDataKey)}\r\n        className={classes.backNavigation}\r\n      >\r\n        <ArrowBackIcon />\r\n        <Typography>Back To Summary</Typography>\r\n      </Button>\r\n      <Box className={classes.verticalStack}>\r\n        <Box className={classes.horizontalStack}>\r\n          <Slide direction=\"right\" in={true} timeout={500}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Card variant=\"outlined\" className={classes.detailCard}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h4\">{section.scaledScore}</Typography>\r\n                    <Typography variant=\"subtitle2\">Scaled Score</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item>\r\n                <Card variant=\"outlined\" className={classes.detailCard}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h4\">{section.percentage}%</Typography>\r\n                    <Typography variant=\"subtitle2\">Percentile Rank</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item>\r\n                <Card variant=\"outlined\" className={classes.detailCard}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h4\">\r\n                      {section.questionsCorrect} of {section.totalQuestions}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\">\r\n                      Questions Correct\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item>\r\n                <Card variant=\"outlined\" className={classes.detailCard}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h4\">{section.incomplete}</Typography>\r\n                    <Typography variant=\"subtitle2\">\r\n                      Questions Incomplete\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item>\r\n                <Card variant=\"outlined\" className={classes.detailCard}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h4\">\r\n                      {section.flaggedCorrect}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\">\r\n                      <FlagIcon /> Correct\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item>\r\n                <Card variant=\"outlined\" className={classes.detailCard}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h4\">\r\n                      {section.flaggedIncorrect}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\">\r\n                      <FlagIcon /> Incorrect\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Slide>\r\n          <Box className={`${classes.scoreCurve} ${classes.verticalStack}`}>\r\n            <ScoreDistribution\r\n              height={250}\r\n              width={500}\r\n              margin={{ top: 10, left: 10, bottom: 20, right: 10 }}\r\n              leftLabel={section.minScaledScore.toString()}\r\n              rightLabel={section.maxScaledScore.toString()}\r\n              score={section.scaledScore.toString()}\r\n              percentage={section.percentage}\r\n            />\r\n          </Box>\r\n        </Box>\r\n        <Tabs value={tab} onChange={onTabChange}>\r\n          <Tab label=\"Question Review\" />\r\n          <Tab label=\"Highlights\" />\r\n          <Tab label=\"Content & Skills Breakdown\" />\r\n        </Tabs>\r\n        {tab === 0 && (\r\n          <Slide direction=\"up\" in={true} timeout={500}>\r\n            <Box>\r\n              <ItemsTable sectionId={section.id} />\r\n            </Box>\r\n          </Slide>\r\n        )}\r\n        {tab === 1 && (\r\n          <Slide direction=\"up\" in={true} timeout={500}>\r\n            <Box>\r\n              <Highlights sectionId={section.id} />\r\n            </Box>\r\n          </Slide>\r\n        )}\r\n        {tab === 2 && (\r\n          <Slide direction=\"up\" in={true} timeout={500}>\r\n            <Box>\r\n              <SkillsBreakdown />\r\n            </Box>\r\n          </Slide>\r\n        )}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Box, Container, Slide } from \"@material-ui/core\";\n\nimport { ReportHeader } from \"./Header/ReportHeader\";\nimport { Summary } from \"./Summary/Summary\";\nimport { SectionDetails } from \"./Section/SectionDetails\";\nimport { OverallDataKey } from \"./Data/Overall\";\nimport { SectionResults } from \"./Data/Sections\";\n\nexport const App = () => {\n  const [viewing, setViewing] = useState(OverallDataKey);\n\n  return (\n    <>\n      <ReportHeader onNavigate={(to: string) => setViewing(to)} />\n      <Container>\n        {viewing === OverallDataKey && (\n          <Slide direction=\"right\" in={true}>\n            <Box>\n              <Summary onNavigate={(to: string) => setViewing(to)} />\n            </Box>\n          </Slide>\n        )}\n        {SectionResults.map((section) => (\n          <Box key={section.id}>\n            {viewing === section.id && (\n              <Slide direction=\"left\" in={true}>\n                <Box>\n                  <SectionDetails\n                    onNavigate={(to: string) => setViewing(to)}\n                    section={section}\n                  />\n                </Box>\n              </Slide>\n            )}\n          </Box>\n        ))}\n      </Container>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}