{"version":3,"sources":["Charting/BarGraph/BarGraph.module.css","Charting/ArcDiagram/ArcDiagram.module.css","Data/MockData.ts","Charting/Treemap/TreemapLayout.ts","Utils/Color.ts","Charting/Treemap/TreemapUtils.ts","Charting/Treemap/Treemap.tsx","Widgets/ClassificationDistribution/ClassificationDistributionWidget.tsx","Charting/BarGraph/BarGraphUtils.tsx","Charting/BarGraph/BarGraph.tsx","Widgets/ContentOverTime/ContentOverTimeWidget.tsx","Charting/ArcDiagram/ArcDiagram.tsx","Charting/ArcDiagram/ArcDiagramUtils.ts","Widgets/EnemyDistribution/EnemyDistributionWidget.tsx","App.tsx","index.tsx","Widgets/ClassificationDistribution/ClassificationDistribution.module.css","Charting/Treemap/Treemap.module.css","Widgets/EnemyDistribution/EnemyDistribution.module.css","Widgets/ContentOverTime/ContentOverTime.module.css"],"names":["module","exports","MockDataProvider","spec","classificationSet","enemyDistributions","contentOverTime","createContentOverTime","node","undefined","data","thisNode","children","length","id","categories","map","c","name","dateRange","generateDateRange","contentOverTimeDaysAgo","entries","values","bumps","dateIndex","date","categoryData","i","child","randomInRange","range","Math","max","floor","random","randomFrom","min","generateId","result","characters","charactersLength","charAt","days","dates","currentDate","Date","setDate","getDate","push","this","createClassification","createEnemyDistributions","depth","classificationNameLength","isRoot","classificationSetStructure","value","classificationLeafValueRange","numberOfNodes","nodeIndex","distributions","createEnemyDistribution","nodes","links","potentialGroups","enemyNodeRange","itemIdLength","group","indexOne","nodeOne","indexTwo","nodeTwo","enemyLinkProbabilityInternal","enemyLinkProbabilityExternal","source","target","weight","m","j","x","y","z","w","exp","getLayout","width","height","paddingOuter","paddingTop","paddingInner","round","tile","margin","left","top","right","bottom","layout","treemap","size","treemapSlice","treemapDice","treemapSliceDice","treemapBinary","treemapSquarify","getTreemapTile","getColorForId","scaleOrdinal","schemeCategory10","getFillColor","basedOn","pointerNode","parent","getLeafId","index","getLeafHref","getClipId","getClipHref","getWidth","x1","x0","getHeight","y1","y0","hasChildren","isLeaf","Treemap","props","toNumeric","datum","animated","canDrill","onDrill","parentLabels","leafLabels","dataHierarchy","useMemo","numeric","hierarchy","sum","sort","a","b","asHierarchy","root","useState","focusedNode","setFocusedNode","setFocusedNodeInternal","getCurrentNode","isNodeFocusedRoot","currentNode","viewBox","className","classes","descendants","transform","link","onClick","requestedNode","copy","onNodeFocusRequested","fill","fillOpacity","href","clipPath","dominantBaseline","style","opacity","ClassificationDistributionWidget","onFocusChanged","treeHeight","maxStackedY","stack","flatMap","series","entry","maxSplitY","domainNameWrapper","isValidElement","dy","getDomainValues","Array","s","getMaxDomain","_","BarGraph","includeLegend","legendPadding","legendEntryHeight","seriesKeys","toString","seriesIds","seriesNames","domainValues","names","domainLabels","domainPlainNames","isArray","domainPlainText","getDomainNames","formattedSeries","transpose","dataStack","keys","xScale","scaleBand","domain","v","rangeRound","getXScale","yScaleStacked","scaleLinear","getYScaleStacked","yScaleGrouped","getYScaleGrouped","getX","getY","highlightedSeries","setHighlightedSeries","highlightedEntry","setHighlightedEntry","legendHeight","legendY","setHover","seriesIndex","seriesEntry","isAnySeriesHighlighted","isSeriesHighlighted","isEntryPrimary","pointIndex","scaleSequential","interpolateBlues","getRectX","bandwidth","getRectY","getRectHeight","onMouseEnter","onMouseLeave","cursor","hover","dataSeries","stroke","pointValue","onMouseOver","onMouseOut","entering","primary","secondary","textAnchor","d","label","y2","ContentOverTimeWidget","chartHeight","includedCategories","setIncludedCategories","availableCategories","stacked","setStacked","domainPlainNameForChart","toISOString","split","chartData","category","Object","widget","Button","variant","color","marginRight","FormControlLabel","control","Checkbox","checked","indexOf","onChange","categoryId","find","slice","toggleCategory","ArcDiagram","getCategory","orientation","step","sortBy","labelHover","setLabelHover","isLabelPrimaryForHover","isLabelSecondaryForHover","sourceLinks","some","l","targetLinks","linkIsPrimaryForHover","graph","getUnlinkedGraphNodes","nodeMap","get","getGraphLinks","Map","makeGraph","scalePoint","arc","x2","xr","abs","yr","arcHorizontal","arcVertical","strokeOpacity","strokeWidth","drop","filter","lab","darker","rgb","r","pointerEvents","EnemyDistributionWidget","sortOrder","setSortOrder","App","dataProvider","focused","setFocused","Paper","elevation","padding","borderRadius","minWidth","Grid","container","spacing","alignItems","justify","item","xs","Typography","align","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b33f63c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hover\":\"BarGraph_hover__1qRKN\",\"primary\":\"BarGraph_primary__3ngI0\",\"secondary\":\"BarGraph_secondary__3FPSO\",\"series-filled\":\"BarGraph_series-filled__2kOrf\",\"animated\":\"BarGraph_animated__cZEaA\",\"entering\":\"BarGraph_entering__35wIn\",\"drop-in\":\"BarGraph_drop-in__23NnK\",\"fade-out\":\"BarGraph_fade-out__3h_Ww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hover\":\"ArcDiagram_hover__109Vy\",\"primary\":\"ArcDiagram_primary__163Yg\",\"secondary\":\"ArcDiagram_secondary__2ll6v\",\"animated\":\"ArcDiagram_animated__DxH_3\",\"drop\":\"ArcDiagram_drop__12STw\",\"drop-in\":\"ArcDiagram_drop-in__3hrXj\"};","export interface ClassificationDistributionNode {\r\n  id: string;\r\n  name: string;\r\n  value?: number;\r\n  children?: Array<ClassificationDistributionNode>;\r\n  isRoot: boolean;\r\n}\r\n\r\nexport interface EnemyDistributionData {\r\n  nodes: Array<EnemyDistributionNode>;\r\n  links: Array<EnemyDistributionLink>;\r\n}\r\n\r\nexport interface EnemyDistributionNode {\r\n  id: string;\r\n  group: string | number;\r\n}\r\n\r\nexport interface EnemyDistributionLink {\r\n  source: string;\r\n  target: string;\r\n  weight: number;\r\n}\r\n\r\nexport type ContentByCategory = { [key: string]: number };\r\n\r\nexport interface ContentOverTimeData {\r\n  dateRange: Array<Date>;\r\n  categories: Array<{ id: string; name: string }>;\r\n  entries: Record<string, ContentByCategory>;\r\n}\r\n\r\nexport interface MockDataSpecification {\r\n  itemIdLength: number;\r\n  classificationNameLength: number;\r\n\r\n  classificationSetStructure: Array<number>;\r\n  classificationLeafValueRange: { [0]: number; [1]: number };\r\n\r\n  enemyNodeRange: { [0]: number; [1]: number };\r\n  enemyLinkProbabilityInternal: number;\r\n  enemyLinkProbabilityExternal: number;\r\n\r\n  contentOverTimeDaysAgo: number;\r\n}\r\n\r\nexport class MockDataProvider {\r\n  public classificationSet: ClassificationDistributionNode;\r\n  public enemyDistributions: Record<string, EnemyDistributionData>;\r\n  public contentOverTime: Record<string, ContentOverTimeData>;\r\n\r\n  constructor(private spec: MockDataSpecification) {\r\n    this.classificationSet = this.createClassification();\r\n    this.enemyDistributions = this.createEnemyDistributions();\r\n    this.contentOverTime = this.createContentOverTime();\r\n  }\r\n\r\n  private createClassification(depth: number = 0): ClassificationDistributionNode {\r\n    let node: ClassificationDistributionNode = {\r\n      id: this.generateId(12),\r\n      name: this.generateId(this.spec.classificationNameLength),\r\n      isRoot: depth === 0,\r\n    };\r\n\r\n    if (depth >= this.spec.classificationSetStructure.length)\r\n      node.value = this.randomInRange(this.spec.classificationLeafValueRange);\r\n    else {\r\n      let numberOfNodes = this.spec.classificationSetStructure[depth];\r\n      for (let nodeIndex = 0; nodeIndex < numberOfNodes; nodeIndex++) {\r\n        (node.children || (node.children = [])).push(this.createClassification(depth + 1));\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  private createEnemyDistributions(\r\n    node: ClassificationDistributionNode | undefined = undefined,\r\n    depth: number = 0\r\n  ): Record<string, EnemyDistributionData> {\r\n    let distributions: Record<string, EnemyDistributionData> = {};\r\n\r\n    let thisNode = node || this.classificationSet;\r\n    let data = this.createEnemyDistribution(thisNode, depth);\r\n    if (data) distributions[thisNode.id] = data;\r\n\r\n    if (thisNode.children)\r\n      for (let child of thisNode.children)\r\n        distributions = { ...distributions, ...this.createEnemyDistributions(child, depth + 1) };\r\n\r\n    return distributions;\r\n  }\r\n\r\n  private createEnemyDistribution(\r\n    node: ClassificationDistributionNode,\r\n    depth: number\r\n  ): EnemyDistributionData | undefined {\r\n    if (!node.children || node.children.length === 0) return undefined;\r\n\r\n    var data: EnemyDistributionData = {\r\n      nodes: [],\r\n      links: [],\r\n    };\r\n\r\n    let potentialGroups = node.children.map((c) => c.id);\r\n    let numberOfNodes = this.randomInRange(this.spec.enemyNodeRange);\r\n    for (let nodeIndex = 0; nodeIndex < numberOfNodes; nodeIndex++)\r\n      data.nodes.push({\r\n        id: this.generateId(this.spec.itemIdLength),\r\n        group: this.randomFrom(potentialGroups),\r\n      });\r\n\r\n    for (let indexOne = 0; indexOne < numberOfNodes; indexOne++) {\r\n      let nodeOne = data.nodes[indexOne];\r\n      for (let indexTwo = indexOne; indexTwo < numberOfNodes; indexTwo++) {\r\n        let nodeTwo = data.nodes[indexTwo];\r\n        if (\r\n          Math.random() <=\r\n          (nodeOne.group === nodeTwo.group\r\n            ? this.spec.enemyLinkProbabilityInternal\r\n            : this.spec.enemyLinkProbabilityExternal / Math.max(1, 10 * depth))\r\n        ) {\r\n          data.links.push({\r\n            source: nodeOne.id,\r\n            target: nodeTwo.id,\r\n            weight: 1,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  private createContentOverTime = (\r\n    node: ClassificationDistributionNode | undefined = undefined\r\n  ): Record<string, ContentOverTimeData> => {\r\n    let data: Record<string, ContentOverTimeData> = {};\r\n\r\n    let thisNode = node || this.classificationSet;\r\n    if (!thisNode.children || thisNode.children.length === 0) return data;\r\n\r\n    data[thisNode.id] = {\r\n      categories: thisNode.children.map((c) => ({ name: c.name, id: c.id })),\r\n      dateRange: this.generateDateRange(this.spec.contentOverTimeDaysAgo),\r\n      entries: {},\r\n    };\r\n\r\n    var values = data[thisNode.id].categories.map(() => bumps(this.spec.contentOverTimeDaysAgo));\r\n\r\n    for (let dateIndex = 0; dateIndex < data[thisNode.id].dateRange.length; dateIndex++) {\r\n      let date = data[thisNode.id].dateRange[dateIndex];\r\n      let categoryData: ContentByCategory = {};\r\n      data[thisNode.id].categories.map((c, i) => (categoryData[c.id] = values[i][dateIndex]));\r\n      data[thisNode.id].entries[+date] = categoryData;\r\n    }\r\n\r\n    for (let child of thisNode.children) data = { ...data, ...this.createContentOverTime(child) };\r\n\r\n    return data;\r\n  };\r\n\r\n  private randomInRange = (range: { [0]: number; [1]: number }) =>\r\n    Math.max(range[0], range[0] + Math.floor(Math.random() * range[1] - range[0]));\r\n\r\n  private randomFrom = <T extends any>(data: Array<T>) =>\r\n    data[Math.floor(Math.min(Math.random() * data.length, data.length - 1))];\r\n\r\n  private generateId = (length: number) => {\r\n    let result = \"\";\r\n    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  private generateDateRange = (days: number) => {\r\n    var dates: Array<Date> = [];\r\n    var currentDate = new Date();\r\n    currentDate.setDate(new Date().getDate() - days + 1);\r\n    while (currentDate <= new Date()) {\r\n      dates.push(new Date(currentDate));\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dates;\r\n  };\r\n}\r\n\r\nfunction bumps(m: number) {\r\n  const values = [];\r\n\r\n  // Initialize with uniform random values in [0.1, 0.2).\r\n  for (let i = 0; i < m; ++i) {\r\n    values[i] = 0.1 + 0.1 * Math.random();\r\n  }\r\n\r\n  // Add five random bumps.\r\n  for (let j = 0; j < 5; ++j) {\r\n    const x = 1 / (0.1 + Math.random());\r\n    const y = 2 * Math.random() - 0.5;\r\n    const z = 10 / (0.1 + Math.random());\r\n    for (let i = 0; i < m; i++) {\r\n      const w = (i / m - y) * z;\r\n      values[i] += x * Math.exp(-w * w);\r\n    }\r\n  }\r\n\r\n  // Ensure all values are positive.\r\n  for (let i = 0; i < m; ++i) {\r\n    values[i] = Math.max(0, values[i]);\r\n  }\r\n\r\n  return values;\r\n}\r\n","import { treemap, treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify } from \"d3\";\r\n\r\nexport type TreemapTiling = \"squarify\" | \"slice\" | \"dice\" | \"slicedice\" | \"binary\";\r\n\r\nexport type TreemapLayoutProperties = {\r\n  height: number;\r\n  width: number;\r\n  paddingOuter?: number;\r\n  paddingTop?: number;\r\n  paddingInner?: number;\r\n  round?: boolean;\r\n  tile?: TreemapTiling;\r\n  margin?: { left: number; right: number; top: number; bottom: number };\r\n};\r\n\r\nconst getTreemapTile = (tile: TreemapTiling | undefined) => {\r\n  switch (tile) {\r\n    case \"slice\":\r\n      return treemapSlice;\r\n    case \"dice\":\r\n      return treemapDice;\r\n    case \"slicedice\":\r\n      return treemapSliceDice;\r\n    case \"binary\":\r\n      return treemapBinary;\r\n    default:\r\n      return treemapSquarify;\r\n  }\r\n};\r\n\r\nexport const getLayout = <T extends any>({\r\n  width,\r\n  height,\r\n  paddingOuter,\r\n  paddingTop,\r\n  paddingInner,\r\n  round,\r\n  tile,\r\n  margin = { left: 0, top: 0, right: 0, bottom: 0 },\r\n}: TreemapLayoutProperties) => {\r\n  let layout = treemap<T>().size([\r\n    width - (margin.left + margin.right),\r\n    height - (margin.top + margin.bottom),\r\n  ]);\r\n  paddingOuter && layout.paddingOuter(paddingOuter);\r\n  paddingTop && layout.paddingTop(paddingTop);\r\n  paddingInner && layout.paddingInner(paddingInner);\r\n  round && layout.round(round);\r\n  layout.tile(getTreemapTile(tile));\r\n\r\n  return layout;\r\n};\r\n","import { scaleOrdinal, schemeCategory10 } from \"d3\";\r\n\r\nexport const getColorForId = scaleOrdinal(schemeCategory10);\r\n","import { hierarchy, HierarchyRectangularNode } from \"d3\";\r\nimport { getColorForId } from \"../../Utils/Color\";\r\n\r\nexport const asHierarchy = <T extends any>(data: T, numeric: (datum: T) => number) =>\r\n  hierarchy(data)\r\n    .sum(numeric)\r\n    .sort((a, b) => b.value! - a.value!);\r\n\r\nexport const getFillColor = <T extends any>(\r\n  node: HierarchyRectangularNode<T>,\r\n  basedOn: (value: T) => string\r\n) => {\r\n  if (node.depth === 0) return \"white\";\r\n  let pointerNode = node;\r\n  while (pointerNode.depth > 1) pointerNode = pointerNode.parent!;\r\n  return getColorForId(basedOn(pointerNode.data));\r\n};\r\n\r\nexport const getLeafId = (index: number) => `O-leaf-${index}`;\r\nexport const getLeafHref = (index: number) => `#${getLeafId(index)}`;\r\nexport const getClipId = (index: number) => `O-clip-${index}`;\r\nexport const getClipHref = (index: number) => `#${getClipId(index)}`;\r\n\r\nexport const getWidth = <T extends any>(node: HierarchyRectangularNode<T>) => node.x1 - node.x0;\r\nexport const getHeight = <T extends any>(node: HierarchyRectangularNode<T>) => node.y1 - node.y0;\r\n\r\nexport const hasChildren = <T extends any>(node: HierarchyRectangularNode<T>) =>\r\n  (node.children?.length || 0) > 0;\r\n\r\nexport const isLeaf = <T extends any>(node: HierarchyRectangularNode<T>) =>\r\n  (node.children?.length || 0) === 0;\r\n","import React, { useMemo, useState } from \"react\";\r\n\r\nimport { getLayout, TreemapLayoutProperties } from \"./TreemapLayout\";\r\nimport {\r\n  asHierarchy,\r\n  getClipHref,\r\n  getClipId,\r\n  getFillColor,\r\n  getHeight,\r\n  getLeafHref,\r\n  getLeafId,\r\n  getWidth,\r\n  hasChildren,\r\n  isLeaf,\r\n} from \"./TreemapUtils\";\r\nimport classes from \"./Treemap.module.css\";\r\nimport { HierarchyRectangularNode } from \"d3\";\r\n\r\nexport type DataNode<T> = {\r\n  id: string;\r\n  name: string;\r\n  value?: T;\r\n  children?: Array<DataNode<T>>;\r\n};\r\n\r\nexport type TreemapProperties<T> = {\r\n  data: DataNode<T>;\r\n  toNumeric?: (datum: DataNode<T>) => number;\r\n  animated?: boolean;\r\n  canDrill?: boolean;\r\n  onDrill?: (id: string) => void;\r\n  parentLabels?: boolean | ((datum: DataNode<T>) => string | JSX.Element);\r\n  leafLabels?: boolean | ((datum: DataNode<T>) => string | JSX.Element);\r\n} & TreemapLayoutProperties;\r\n\r\nexport const Treemap = <T extends any>(props: TreemapProperties<T>) => {\r\n  const {\r\n    height,\r\n    width,\r\n    data,\r\n    toNumeric = (datum) => +(datum.value || 0),\r\n    animated = true,\r\n    canDrill = true,\r\n    onDrill = (id: string) => {},\r\n    parentLabels = true,\r\n    leafLabels = true,\r\n    margin = { left: 0, bottom: 0, right: 0, top: 0 },\r\n  } = props;\r\n\r\n  const dataHierarchy = useMemo(() => asHierarchy<DataNode<T>>(data, toNumeric), [data, toNumeric]);\r\n  const layout = useMemo(() => getLayout<DataNode<T>>(props), [props]);\r\n  const root = useMemo(() => layout(dataHierarchy), [layout, dataHierarchy]);\r\n\r\n  const [focusedNode, setFocusedNode] = useState<HierarchyRectangularNode<DataNode<T>> | undefined>();\r\n  const setFocusedNodeInternal = (node: HierarchyRectangularNode<DataNode<T>> | undefined) => {\r\n    setFocusedNode(node);\r\n    onDrill((node || root).data.id);\r\n  };\r\n\r\n  const getCurrentNode = () => focusedNode || root;\r\n\r\n  const isNodeFocusedRoot = (node: HierarchyRectangularNode<DataNode<T>>) => {\r\n    let currentNode = getCurrentNode();\r\n    return currentNode.data.id !== root.data.id && currentNode.data.id === node.data.id;\r\n  };\r\n\r\n  const onNodeFocusRequested = (node: HierarchyRectangularNode<DataNode<T>>) => {\r\n    let requestedNode = node;\r\n    if (isLeaf(node)) requestedNode = node.parent!;\r\n\r\n    let currentNode = getCurrentNode();\r\n    if (!requestedNode || currentNode.data.id === requestedNode.data.id) {\r\n      setFocusedNodeInternal(undefined);\r\n    } else {\r\n      setFocusedNodeInternal(layout(requestedNode.copy()));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      viewBox={`0 0 ${width} ${height}`}\r\n      width={width}\r\n      height={height}\r\n      className={`${animated && classes.animated}`}\r\n    >\r\n      {getCurrentNode()\r\n        .descendants()\r\n        .map((node, index) => (\r\n          <g\r\n            key={`${node.data.id}`}\r\n            transform={`translate(${node.x0 + margin.right},${node.y0 + margin.bottom})`}\r\n            className={`${canDrill && classes.link}`}\r\n            onClick={() => canDrill && onNodeFocusRequested(node)}\r\n          >\r\n            <rect\r\n              id={getLeafId(index)}\r\n              fill={getFillColor(node, (node) => node.id)}\r\n              fillOpacity={0.25}\r\n              width={getWidth(node)}\r\n              height={getHeight(node)}\r\n            />\r\n            <clipPath id={getClipId(index)}>\r\n              <use href={getLeafHref(index)}></use>\r\n            </clipPath>\r\n            <text\r\n              clipPath={`url(${getClipHref(index)})`}\r\n              x={props.paddingInner}\r\n              y={props.paddingInner}\r\n              dominantBaseline='text-before-edge'\r\n            >\r\n              {hasChildren(node) &&\r\n                parentLabels &&\r\n                ((typeof parentLabels === \"function\" && parentLabels(node.data)) || (\r\n                  <tspan>{node.data.name}</tspan>\r\n                ))}\r\n              {isLeaf(node) &&\r\n                leafLabels &&\r\n                ((typeof leafLabels === \"function\" && leafLabels(node.data)) || (\r\n                  <>\r\n                    <tspan>{node.data.name}</tspan>\r\n                    <tspan x={0} y={\"1.5em\"} style={{ opacity: 0.5 }}>{`${node.data.value}`}</tspan>\r\n                  </>\r\n                ))}\r\n              {isNodeFocusedRoot(node) && <tspan>(Click me to go back!)</tspan>}\r\n            </text>\r\n          </g>\r\n        ))}\r\n    </svg>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport classes from \"./ClassificationDistribution.module.css\";\r\nimport { Treemap } from \"../../Charting/Treemap\";\r\nimport { ClassificationDistributionNode } from \"../../Data/MockData\";\r\n\r\nexport type ClassificationDistributionProperties = {\r\n  width: number;\r\n  height: number;\r\n  data: ClassificationDistributionNode;\r\n  onFocusChanged: (id: string) => void;\r\n};\r\n\r\nexport const ClassificationDistributionWidget = ({\r\n  width,\r\n  height,\r\n  data,\r\n  onFocusChanged,\r\n}: ClassificationDistributionProperties) => {\r\n  const controlsHeight = 0;\r\n  const treeHeight = Math.max(0, height - controlsHeight);\r\n\r\n  return (\r\n    <div style={{ height, width }} className={classes[\"classification-distribution-container\"]}>\r\n      <div style={{ height: controlsHeight }}></div>\r\n      <div className={classes[\"treemap-container\"]}>\r\n        <Treemap\r\n          height={treeHeight}\r\n          width={width}\r\n          data={data}\r\n          paddingOuter={3}\r\n          paddingInner={3}\r\n          paddingTop={20}\r\n          animated={true}\r\n          canDrill={true}\r\n          onDrill={onFocusChanged}\r\n          tile='squarify'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { max, scaleBand, scaleLinear, Series } from \"d3\";\r\nimport { isValidElement } from \"react\";\r\nimport { BarGraphData } from \"./BarGraph\";\r\n\r\nexport const getXScale = (data: BarGraphData, margin: { left: number; right: number }, width: number) =>\r\n  scaleBand()\r\n    .domain(getDomainValues(data).map((v) => v.toString()))\r\n    .rangeRound([margin.left, width - margin.right]);\r\n\r\nconst maxStackedY = (stack: Array<Series<{ [key: string]: number }, string>>) =>\r\n  max(stack.flatMap((series) => series.flatMap((entry) => entry[1])))!;\r\n\r\nconst maxSplitY = (stack: Array<Series<{ [key: string]: number }, string>>) =>\r\n  max(stack.flatMap((series) => series.flatMap((entry) => entry[1] - entry[0])))!;\r\n\r\nexport const getYScaleStacked = (\r\n  stack: Array<Series<{ [key: string]: number }, string>>,\r\n  margin: { bottom: number; top: number },\r\n  height: number\r\n) =>\r\n  scaleLinear()\r\n    .domain([0, maxStackedY(stack)])\r\n    .range([height - margin.bottom, margin.top]);\r\n\r\nexport const getYScaleGrouped = (\r\n  stack: Array<Series<{ [key: string]: number }, string>>,\r\n  margin: { bottom: number; top: number },\r\n  height: number\r\n) =>\r\n  scaleLinear()\r\n    .domain([0, maxSplitY(stack)])\r\n    .range([height - margin.bottom, margin.top]);\r\n\r\nconst domainNameWrapper = (name: string | JSX.Element) => {\r\n  if (isValidElement(name)) return name;\r\n  return (\r\n    <text fill='currentColor' y={9} dy='0.71em'>\r\n      {name}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst getMaxDomain = (data: BarGraphData) => Math.max(0, ...data.series.map((s) => s.entries.length));\r\nconst getDomainValues = (data: BarGraphData) => new Array(getMaxDomain(data)).fill(0).map((_, i) => i);\r\n\r\nexport interface DomainLabelsAndPlainNames {\r\n  domainLabels: Array<JSX.Element>;\r\n  domainPlainNames: Array<string>;\r\n}\r\n\r\nexport const getDomainNames = (data: BarGraphData) => {\r\n  let domainValues = getDomainValues(data);\r\n  let names: DomainLabelsAndPlainNames = { domainLabels: [], domainPlainNames: [] };\r\n\r\n  if (data.domainLabels && Array.isArray(data.domainLabels))\r\n    names.domainLabels = data.domainLabels.map(domainNameWrapper);\r\n  else if (data.domainLabels && typeof data.domainLabels === \"function\")\r\n    names.domainLabels = domainValues.map(data.domainLabels).map(domainNameWrapper);\r\n  else names.domainLabels = domainValues.map((i) => domainNameWrapper(i.toString()));\r\n\r\n  if (data.domainPlainText && Array.isArray(data.domainPlainText))\r\n    names.domainPlainNames = data.domainPlainText;\r\n  else if (data.domainPlainText && typeof data.domainPlainText === \"function\")\r\n    names.domainPlainNames = domainValues.map(data.domainPlainText);\r\n  else names.domainPlainNames = domainValues.map((i) => i.toString());\r\n\r\n  return names;\r\n};\r\n","import { interpolateBlues, scaleSequential, stack, transpose } from \"d3\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { getColorForId } from \"../../Utils/Color\";\r\n\r\nimport classes from \"./BarGraph.module.css\";\r\nimport { getDomainNames, getXScale, getYScaleGrouped, getYScaleStacked } from \"./BarGraphUtils\";\r\n\r\nexport interface BarGraphDataSeries {\r\n  id: string;\r\n  name?: string;\r\n  entries: Array<number>;\r\n}\r\n\r\nexport interface BarGraphData {\r\n  series: Array<BarGraphDataSeries>;\r\n  domainLabels?: Array<string | JSX.Element> | ((index: number) => string | JSX.Element);\r\n  domainPlainText?: Array<string> | ((index: number) => string);\r\n}\r\n\r\nexport interface BarGraphProperties {\r\n  height: number;\r\n  width: number;\r\n  data: BarGraphData;\r\n  animated?: boolean;\r\n  layout?: \"stacked\" | \"grouped\";\r\n  includeLegend?: boolean;\r\n  legendPadding?: number;\r\n  legendEntryHeight?: number;\r\n  margin?: { top: number; left: number; bottom: number; right: number };\r\n}\r\n\r\nexport const BarGraph = ({\r\n  height,\r\n  width,\r\n  data,\r\n  animated = true,\r\n  layout = \"stacked\",\r\n  includeLegend = true,\r\n  legendPadding = 15,\r\n  legendEntryHeight = 40,\r\n  margin = { top: 0, left: 0, bottom: 0, right: 0 },\r\n}: BarGraphProperties) => {\r\n  const { series = [] } = data;\r\n\r\n  const seriesKeys = useMemo(() => series.map((_, i) => i.toString()), [series]);\r\n  const seriesIds = useMemo(() => series.map((s) => s.id), [series]);\r\n  const seriesNames = useMemo(() => series.map((s, index) => s.name || `series ${index + 1}`), [series]);\r\n  const { domainPlainNames, domainLabels } = useMemo(() => getDomainNames(data), [data]);\r\n\r\n  const formattedSeries = useMemo(\r\n    () =>\r\n      transpose<number>(series.map((s) => s.entries)) as Iterable<{\r\n        [key: string]: number;\r\n      }>,\r\n    [series]\r\n  );\r\n  const dataStack = useMemo(() => stack().keys(seriesKeys)(formattedSeries), [seriesKeys, formattedSeries]);\r\n\r\n  const xScale = useMemo(() => getXScale(data, margin, width), [data, margin, width]);\r\n  const yScaleStacked = useMemo(() => getYScaleStacked(dataStack, margin, height), [\r\n    dataStack,\r\n    height,\r\n    margin,\r\n  ]);\r\n  const yScaleGrouped = useMemo(() => getYScaleGrouped(dataStack, margin, height), [\r\n    dataStack,\r\n    height,\r\n    margin,\r\n  ]);\r\n\r\n  const getX = (value: number) => xScale(value.toString());\r\n  const getY = (value: number) => (layout === \"stacked\" ? yScaleStacked(value) : yScaleGrouped(value));\r\n\r\n  const [highlightedSeries, setHighlightedSeries] = useState<number | undefined>(undefined);\r\n  const [highlightedEntry, setHighlightedEntry] = useState<number | undefined>(undefined);\r\n\r\n  const legendHeight = legendPadding * 2 + legendEntryHeight * seriesNames.length;\r\n  const legendY = margin.top + (height - legendHeight) / 2;\r\n\r\n  const setHover = (\r\n    seriesIndex: number | undefined = undefined,\r\n    seriesEntry: number | undefined = undefined\r\n  ) => {\r\n    setHighlightedSeries(seriesIndex);\r\n    setHighlightedEntry(seriesEntry);\r\n  };\r\n\r\n  const isAnySeriesHighlighted = () => highlightedSeries !== undefined;\r\n  const isSeriesHighlighted = (seriesIndex: number) => highlightedSeries === seriesIndex;\r\n  const isEntryPrimary = (seriesIndex: number, pointIndex: number) =>\r\n    isSeriesHighlighted(seriesIndex) && highlightedEntry === pointIndex;\r\n\r\n  const fill = (index: number) =>\r\n    scaleSequential(interpolateBlues).domain([-0.5 * series.length, 1.5 * series.length])(index);\r\n\r\n  const getRectWidth = () => xScale.bandwidth() / (layout === \"stacked\" ? 1 : series.length);\r\n  const getRectX = (seriesIndex: number, pointIndex: number) =>\r\n    getX(pointIndex)! + (layout === \"stacked\" ? 0 : (xScale.bandwidth() / series.length) * seriesIndex);\r\n\r\n  const getRectY = (seriesIndex: number, pointIndex: number) => {\r\n    let datum = dataStack[seriesIndex][pointIndex];\r\n    return Math.max(0, layout === \"stacked\" ? getY(datum[1]) : getY(datum[1] - datum[0]));\r\n  };\r\n  const getRectHeight = (seriesIndex: number, pointIndex: number) => {\r\n    let datum = dataStack[seriesIndex][pointIndex];\r\n    return Math.max(\r\n      0,\r\n      layout === \"stacked\" ? getY(datum[0]) - getY(datum[1]) : getY(0) - getY(datum[1] - datum[0])\r\n    );\r\n  };\r\n\r\n  return (\r\n    <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\r\n      {includeLegend && (\r\n        <g>\r\n          {seriesNames.map((name, index) => (\r\n            <g\r\n              key={`legend-series-${name}`}\r\n              onMouseEnter={() => setHover(index)}\r\n              onMouseLeave={() => setHover()}\r\n              style={{ cursor: \"default\" }}\r\n            >\r\n              <rect\r\n                x={25}\r\n                y={legendY + 30 + (seriesNames.length - index - 1) * 40}\r\n                width={125}\r\n                height={40}\r\n                fill='transparent'\r\n              />\r\n              <rect\r\n                className={`${classes[\"series-filled\"]} ${animated && classes.animated} ${\r\n                  isAnySeriesHighlighted() && classes.hover\r\n                }`}\r\n                x={25}\r\n                y={legendY + 50 + (seriesNames.length - index - 1) * 40}\r\n                width={15}\r\n                height={15}\r\n                style={{\r\n                  fill: isAnySeriesHighlighted()\r\n                    ? isSeriesHighlighted(index)\r\n                      ? fill(series.length + 1)\r\n                      : fill(0)\r\n                    : getColorForId(seriesIds[index]),\r\n                }}\r\n              />\r\n              <text\r\n                x={50}\r\n                y={legendY + 62 + (seriesNames.length - index - 1) * 40}\r\n                className={`${animated && classes.animated}`}\r\n              >\r\n                {name}\r\n              </text>\r\n            </g>\r\n          ))}\r\n        </g>\r\n      )}\r\n      <g className={`${isAnySeriesHighlighted() && classes.hover}`}>\r\n        {series.map((dataSeries, seriesIndex) => (\r\n          <g\r\n            key={seriesNames[seriesIndex]}\r\n            style={{\r\n              stroke: fill(series.length),\r\n              fill: isAnySeriesHighlighted()\r\n                ? fill(series.length + 1)\r\n                : getColorForId(seriesIds[seriesIndex]),\r\n            }}\r\n          >\r\n            {dataSeries.entries.map((pointValue, pointIndex) => (\r\n              <rect\r\n                key={`${dataSeries.name}-${pointIndex}`}\r\n                x={getRectX(seriesIndex, pointIndex)}\r\n                y={getRectY(seriesIndex, pointIndex)}\r\n                width={getRectWidth()}\r\n                height={getRectHeight(seriesIndex, pointIndex)}\r\n                onMouseOver={() => setHover(seriesIndex, pointIndex)}\r\n                onMouseOut={() => setHover()}\r\n                className={`${classes[\"series-filled\"]} ${animated && classes.animated} ${classes.entering} ${\r\n                  isEntryPrimary(seriesIndex, pointIndex)\r\n                    ? classes.primary\r\n                    : isSeriesHighlighted(seriesIndex)\r\n                    ? classes.secondary\r\n                    : \"\"\r\n                }`}\r\n              >\r\n                <title>{`${seriesNames[seriesIndex]}\\n${domainPlainNames[pointIndex]}\\n${pointValue}`}</title>\r\n              </rect>\r\n            ))}\r\n          </g>\r\n        ))}\r\n        <g transform={`translate(0,${height - margin.bottom})`} fill='none' textAnchor='middle'>\r\n          <path stroke='currentColor' d={`m ${margin.left} 0 H${width - margin.right}`} />\r\n          {domainLabels.map((label, index) => (\r\n            <g key={`tick-${index}`} transform={`translate(${getX(index)! + xScale.bandwidth() / 2},0)`}>\r\n              <line stroke='currentColor' y2='6' />\r\n              {label}\r\n            </g>\r\n          ))}\r\n        </g>\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from \"react\";\r\nimport { BarGraph, BarGraphData } from \"../../Charting/BarGraph\";\r\nimport classes from \"./ContentOverTime.module.css\";\r\nimport { ContentOverTimeData } from \"../../Data/MockData\";\r\nimport { Button, Checkbox, FormControlLabel } from \"@material-ui/core\";\r\n\r\nexport interface ContentOverTimeWidgetProperties {\r\n  width: number;\r\n  height: number;\r\n  data: ContentOverTimeData;\r\n}\r\n\r\nexport const ContentOverTimeWidget = ({ width, height, data }: ContentOverTimeWidgetProperties) => {\r\n  const controlsHeight = 35;\r\n  const chartHeight = Math.max(0, height - controlsHeight);\r\n\r\n  const [includedCategories, setIncludedCategories] = useState<Array<{ name: string; id: string }>>(\r\n    data.categories\r\n  );\r\n\r\n  const availableCategories = useMemo(() => {\r\n    setIncludedCategories(data.categories);\r\n    return data.categories;\r\n  }, [data]);\r\n\r\n  const toggleCategory = (categoryId: string) => {\r\n    var category = data.categories.find((c) => c.id === categoryId)!;\r\n    var index = includedCategories.indexOf(category);\r\n    if (index === -1) setIncludedCategories([...includedCategories, category]);\r\n    else\r\n      setIncludedCategories([...includedCategories.slice(0, index), ...includedCategories.slice(index + 1)]);\r\n  };\r\n\r\n  const [stacked, setStacked] = useState<boolean>(true);\r\n\r\n  const chartDataForCategory = (category: { name: string; id: string }) => ({\r\n    entries: Object.keys(data.entries).map((entry) => data.entries[entry][category.id]),\r\n    name: category.name,\r\n    id: category.id,\r\n  });\r\n\r\n  const domainPlainNameForChart = (index: number) => data.dateRange[index].toISOString().split(\"T\")[0];\r\n  const domainNameForChart = (index: number) => (\r\n    <>\r\n      {(index % 4 === 0 || index === data.dateRange.length - 1) && (\r\n        <text\r\n          fill='currentColor'\r\n          y={9}\r\n          dy='0.71em'\r\n          style={{ transform: \"translate(.75em,0) rotate(45deg\", textAnchor: \"start\" }}\r\n        >\r\n          {domainPlainNameForChart(index)}\r\n        </text>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  const chartData: BarGraphData = {\r\n    series: includedCategories.map(chartDataForCategory),\r\n    domainLabels: domainNameForChart,\r\n    domainPlainText: domainPlainNameForChart,\r\n  };\r\n\r\n  return (\r\n    <div style={{ width, height }} className={classes.widget}>\r\n      <div style={{ height: controlsHeight }}>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          onClick={() => setStacked(!stacked)}\r\n          style={{ marginRight: 15 }}\r\n        >\r\n          {stacked ? \"split\" : \"stack\"}\r\n        </Button>\r\n        {availableCategories.map((category) => (\r\n          <FormControlLabel\r\n            key={`include-${category.id}`}\r\n            control={\r\n              <Checkbox\r\n                color='primary'\r\n                checked={includedCategories.indexOf(category) !== -1}\r\n                onChange={() => toggleCategory(category.id)}\r\n              />\r\n            }\r\n            label={category.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      <BarGraph\r\n        width={width}\r\n        height={chartHeight}\r\n        data={chartData}\r\n        margin={{ top: 0, right: 30, bottom: 60, left: 150 }}\r\n        layout={stacked ? \"stacked\" : \"grouped\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { lab, scalePoint } from \"d3\";\r\nimport React, { useMemo, useState } from \"react\";\r\n\r\nimport { ArcGraphLink, ArcGraphNode, makeGraph } from \"./ArcDiagramUtils\";\r\nimport classes from \"./ArcDiagram.module.css\";\r\nimport { getColorForId } from \"../../Utils/Color\";\r\n\r\nexport interface ArcData<T extends ArcNode> {\r\n  nodes: Array<T>;\r\n  links: Array<ArcLink>;\r\n}\r\n\r\nexport interface ArcNode {\r\n  id: string;\r\n}\r\n\r\nexport interface ArcLink {\r\n  source: string;\r\n  target: string;\r\n}\r\n\r\nexport interface ArcDiagramProperties<T extends ArcNode> {\r\n  height: number;\r\n  width: number;\r\n  data: ArcData<T>;\r\n  getCategory: (node: T) => string;\r\n  orientation?: \"horizontal\" | \"vertical\";\r\n  sortBy?: (a: T, b: T) => number;\r\n  margin?: { left: number; top: number; right: number; bottom: number };\r\n  step?: number;\r\n  animated?: boolean;\r\n}\r\n\r\nexport const ArcDiagram = <T extends ArcNode>({\r\n  height,\r\n  width,\r\n  data,\r\n  getCategory,\r\n  orientation = \"horizontal\",\r\n  margin = { left: 0, top: 0, right: 0, bottom: 0 },\r\n  step = 14,\r\n  sortBy = (a: T, b: T) => (a.id < b.id ? -1 : 1),\r\n  animated = true,\r\n}: ArcDiagramProperties<T>) => {\r\n  const [labelHover, setLabelHover] = useState<string | undefined>(undefined);\r\n\r\n  const isLabelPrimaryForHover = (node: ArcGraphNode<T>) => node.id === labelHover;\r\n  const isLabelSecondaryForHover = (node: ArcGraphNode<T>) => {\r\n    return (\r\n      node.sourceLinks.some((l) => l.target.id === labelHover) ||\r\n      node.targetLinks.some((l) => l.source.id === labelHover)\r\n    );\r\n  };\r\n  const linkIsPrimaryForHover = (link: ArcGraphLink<T>) =>\r\n    link.source.id === labelHover || link.target.id === labelHover;\r\n\r\n  const graph = useMemo(() => makeGraph(data, getCategory), [data, getCategory]);\r\n\r\n  const getY = useMemo(\r\n    () =>\r\n      orientation === \"horizontal\"\r\n        ? () => height - margin.bottom\r\n        : scalePoint(\r\n            graph.nodes\r\n              .map((node) => node.node)\r\n              .sort(sortBy)\r\n              .map((node) => node.id),\r\n            [margin.top, height - margin.bottom]\r\n          ),\r\n    [orientation, graph, margin, sortBy, height]\r\n  );\r\n\r\n  const getX = useMemo(\r\n    () =>\r\n      orientation === \"vertical\"\r\n        ? () => margin.left\r\n        : scalePoint(\r\n            graph.nodes\r\n              .map((node) => node.node)\r\n              .sort(sortBy)\r\n              .map((node) => node.id),\r\n            [margin.left, width - margin.right]\r\n          ),\r\n    [orientation, graph, margin, sortBy, width]\r\n  );\r\n\r\n  const arcHorizontal = (link: ArcGraphLink<T>) => {\r\n    let x1 = getX(link.source.id)!;\r\n    let x2 = getX(link.target.id)!;\r\n    let xr = Math.abs(x2 - x1) / 2;\r\n    let yr = Math.min(height - (margin.bottom + margin.top), xr);\r\n    return `M${x1},${height - margin.bottom}A${xr},${yr} 0,0,${x1 < x2 ? 1 : 0} ${x2},${\r\n      height - margin.bottom\r\n    }`;\r\n  };\r\n\r\n  const arcVertical = (link: ArcGraphLink<T>) => {\r\n    let y1 = getY(link.source.id)!;\r\n    let y2 = getY(link.target.id)!;\r\n    let yr = Math.abs(y2 - y1) / 2;\r\n    let xr = Math.min(width - (margin.left + margin.right), yr);\r\n    return `M${margin.left},${y1}A${xr},${yr} 0,0,${y1 < y2 ? 1 : 0} ${margin.left},${y2}`;\r\n  };\r\n\r\n  const arc = (link: ArcGraphLink<T>) =>\r\n    orientation === \"horizontal\" ? arcHorizontal(link) : arcVertical(link);\r\n\r\n  return (\r\n    <svg\r\n      viewBox={`0 0 ${width} ${height}`}\r\n      height={height}\r\n      width={width}\r\n      className={`${animated && classes.animated} ${labelHover && classes.hover}`}\r\n    >\r\n      {graph.links.map((link) => (\r\n        <g\r\n          key={`${link.source.id}-${link.target.id}`}\r\n          fill={\"none\"}\r\n          strokeOpacity={0.6}\r\n          strokeWidth={1.5}\r\n          className={classes.drop}\r\n        >\r\n          <path\r\n            stroke={\r\n              link.source.category === link.target.category ? getColorForId(link.source.category) : \"#aaa\"\r\n            }\r\n            d={arc(link)}\r\n          ></path>\r\n        </g>\r\n      ))}\r\n      {graph.links.filter(linkIsPrimaryForHover).map((link) => (\r\n        <g\r\n          key={`hover-${link.source.id}-${link.target.id}`}\r\n          fill={\"none\"}\r\n          strokeOpacity={0.6}\r\n          strokeWidth={1.5}\r\n        >\r\n          <path\r\n            stroke={\r\n              link.source.category === link.target.category ? getColorForId(link.source.category) : \"#aaa\"\r\n            }\r\n            d={arc(link)}\r\n            className={`${linkIsPrimaryForHover(link) && classes.primary}`}\r\n          ></path>\r\n        </g>\r\n      ))}\r\n      {graph.nodes.map((node) => (\r\n        <g\r\n          key={node.id}\r\n          transform={`translate(${getX(node.id)},${getY(node.id)})`}\r\n          textAnchor={\"end\"}\r\n          className={`${\r\n            isLabelPrimaryForHover(node)\r\n              ? classes.primary\r\n              : isLabelSecondaryForHover(node)\r\n              ? classes.secondary\r\n              : \"\"\r\n          }`}\r\n        >\r\n          <text\r\n            x={-6}\r\n            dy={\"0.35em\"}\r\n            fill={lab(getColorForId(node.category)).darker(2).rgb().toString()}\r\n            style={{ transform: orientation === \"horizontal\" ? \"rotate(270deg)\" : \"\" }}\r\n          >\r\n            {node.id}\r\n          </text>\r\n          <circle r={3} fill={getColorForId(node.category)} />\r\n        </g>\r\n      ))}\r\n      <g fill={\"none\"} pointerEvents={\"all\"}>\r\n        {graph.nodes.map((node) => (\r\n          <rect\r\n            key={`overlay-${node.id}`}\r\n            width={orientation === \"horizontal\" ? step : margin.left + 40}\r\n            height={orientation === \"horizontal\" ? margin.bottom + 40 : step}\r\n            y={getY(node.id)! - (orientation === \"horizontal\" ? 40 : step / 2)}\r\n            x={getX(node.id)! - (orientation === \"horizontal\" ? step / 2 : 40)}\r\n            onMouseOver={() => setLabelHover(node.id)}\r\n            onMouseOut={() => setLabelHover(undefined)}\r\n          />\r\n        ))}\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n","import { ArcData, ArcNode } from \"./ArcDiagram\";\r\n\r\nexport interface ArcGraph<T extends ArcNode> {\r\n  nodes: Array<ArcGraphNode<T>>;\r\n  links: Array<ArcGraphLink<T>>;\r\n}\r\n\r\nexport interface ArcGraphNode<T extends ArcNode> {\r\n  id: string;\r\n  node: T;\r\n  category: string;\r\n  sourceLinks: Array<ArcGraphLink<T>>;\r\n  targetLinks: Array<ArcGraphLink<T>>;\r\n}\r\n\r\nexport interface ArcGraphLink<T extends ArcNode> {\r\n  source: ArcGraphNode<T>;\r\n  target: ArcGraphNode<T>;\r\n}\r\n\r\nconst getUnlinkedGraphNodes = <T extends ArcNode>(\r\n  data: ArcData<T>,\r\n  getCategory: (node: T) => string\r\n): Array<ArcGraphNode<T>> =>\r\n  data.nodes.map((node) => ({\r\n    id: node.id,\r\n    sourceLinks: [],\r\n    targetLinks: [],\r\n    node: node,\r\n    category: getCategory(node),\r\n  }));\r\n\r\nconst getGraphLinks = <T extends ArcNode>(data: ArcData<T>, nodeMap: Map<string, ArcGraphNode<T>>) =>\r\n  data.links.map(({ source, target }) => ({\r\n    source: nodeMap.get(source)!,\r\n    target: nodeMap.get(target)!,\r\n  }));\r\n\r\nexport const makeGraph = <T extends ArcNode>(\r\n  data: ArcData<T>,\r\n  getCategory: (datum: T) => string\r\n): ArcGraph<T> => {\r\n  let nodes = getUnlinkedGraphNodes(data, getCategory);\r\n  const nodeById = new Map(nodes.map((d) => [d.id, d]));\r\n  const links = getGraphLinks(data, nodeById);\r\n\r\n  for (const link of links) {\r\n    const { source, target } = link;\r\n    source.sourceLinks.push(link);\r\n    target.targetLinks.push(link);\r\n  }\r\n\r\n  return { nodes, links };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { EnemyDistributionData, EnemyDistributionNode } from \"../../Data/MockData\";\r\nimport { ArcDiagram } from \"../../Charting/ArcDiagram\";\r\nimport classes from \"./EnemyDistribution.module.css\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\ntype SortOrder = \"ById\" | \"ByGroup\";\r\n\r\nexport type EnemyDistributionWidgetProperties = {\r\n  width: number;\r\n  height: number;\r\n  data: EnemyDistributionData;\r\n};\r\n\r\nexport const EnemyDistributionWidget = ({ width, height, data }: EnemyDistributionWidgetProperties) => {\r\n  const controlsHeight = 35;\r\n  const chartHeight = Math.max(0, height - controlsHeight);\r\n\r\n  const [sortOrder, setSortOrder] = useState<SortOrder>(\"ById\");\r\n\r\n  const sortByGroup = (a: EnemyDistributionNode, b: EnemyDistributionNode) => (a.group < b.group ? -1 : 1);\r\n  const sortById = (a: EnemyDistributionNode, b: EnemyDistributionNode) => (a.id < b.id ? -1 : 1);\r\n\r\n  return (\r\n    <div style={{ height, width }} className={classes.widget}>\r\n      <div style={{ height: controlsHeight }}>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          onClick={() => setSortOrder(\"ById\")}\r\n          style={{ marginRight: 15 }}\r\n        >\r\n          By ID\r\n        </Button>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          onClick={() => setSortOrder(\"ByGroup\")}\r\n          className={classes[\"control-button\"]}\r\n        >\r\n          By Group\r\n        </Button>\r\n      </div>\r\n      <ArcDiagram\r\n        width={width}\r\n        height={chartHeight}\r\n        orientation={chartHeight > width ? \"vertical\" : \"horizontal\"}\r\n        margin={{\r\n          top: 20,\r\n          right: 20,\r\n          bottom: chartHeight > width ? 20 : 100,\r\n          left: chartHeight > width ? 100 : 20,\r\n        }}\r\n        step={14}\r\n        data={{ nodes: data.nodes, links: data.links }}\r\n        getCategory={(node) => `${node.group}`}\r\n        sortBy={sortOrder === \"ById\" ? sortById : sortByGroup}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { MockDataProvider } from \"./Data/MockData\";\r\nimport { ClassificationDistributionWidget } from \"./Widgets/ClassificationDistribution\";\r\nimport { ContentOverTimeWidget } from \"./Widgets/ContentOverTime\";\r\nimport { EnemyDistributionWidget } from \"./Widgets/EnemyDistribution\";\r\n\r\nfunction App() {\r\n  const [dataProvider] = useState(\r\n    new MockDataProvider({\r\n      itemIdLength: 5,\r\n      classificationNameLength: 3,\r\n      classificationSetStructure: [5, 3, 2],\r\n      classificationLeafValueRange: [100, 250],\r\n      enemyNodeRange: [50, 70],\r\n      enemyLinkProbabilityInternal: 0.125,\r\n      enemyLinkProbabilityExternal: 0.0125,\r\n      contentOverTimeDaysAgo: 45,\r\n    })\r\n  );\r\n  const [focused, setFocused] = useState<string>(dataProvider.classificationSet.id);\r\n\r\n  return (\r\n    <Paper\r\n      elevation={3}\r\n      style={{ margin: \"auto\", padding: 30, borderRadius: 15, width: 1500, minWidth: 1500 }}\r\n    >\r\n      <Grid container spacing={3} alignItems='center' justify='center'>\r\n        <Grid item xs={4}>\r\n          <Typography variant='h3' align='center'>\r\n            Classifications\r\n          </Typography>\r\n          <Typography>\r\n            It can be useful to explore the distribution of a hierarchical classification across an item bank.\r\n            Drill down into any level of the set to see how data in the other widgets might change.\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={8}>\r\n          <ClassificationDistributionWidget\r\n            width={1000}\r\n            height={400}\r\n            data={dataProvider.classificationSet}\r\n            onFocusChanged={setFocused}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3} alignItems='center' justify='center'>\r\n        <Grid item xs={8}>\r\n          <EnemyDistributionWidget\r\n            width={1000}\r\n            height={400}\r\n            data={dataProvider.enemyDistributions[focused]}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Typography variant='h3'>Enemies</Typography>\r\n          <Typography>\r\n            It is crutial to get a sense of the distribution of enemies across an item bank. Sort a sampling\r\n            of items from the selected classification hierarchy level to see how organizing data yields more\r\n            insight.\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3} alignItems='center' justify='center'>\r\n        <Grid item xs={4}>\r\n          <Typography variant='h3'>Content Over Time</Typography>\r\n          <Typography>\r\n            Understanding the flow of new items into your item bank, and their distribution across content\r\n            areas, is important in gaining an understanding of which areas to focus campaigns on. Stack and\r\n            split the data to gain a greater sense of understanding of the flow of items into your bank.\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={8}>\r\n          <ContentOverTimeWidget width={1000} height={400} data={dataProvider.contentOverTime[focused]} />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"treemap-container\":\"ClassificationDistribution_treemap-container__1ni3s\",\"classification-distribution-container\":\"ClassificationDistribution_classification-distribution-container__19EKA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"animated\":\"Treemap_animated__3jOuI\",\"fade-in\":\"Treemap_fade-in__PwLvb\",\"link\":\"Treemap_link__uFXSA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"widget\":\"EnemyDistribution_widget__FfwEL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"widget\":\"ContentOverTime_widget__q8hxn\",\"hover\":\"ContentOverTime_hover__2NKDe\",\"primary\":\"ContentOverTime_primary__33nZN\",\"secondary\":\"ContentOverTime_secondary__2SSlX\",\"animated\":\"ContentOverTime_animated__19SJ5\",\"entering\":\"ContentOverTime_entering__zBnv_\",\"drop-in\":\"ContentOverTime_drop-in__2qyW0\",\"leaving\":\"ContentOverTime_leaving__3jIAS\",\"fade-out\":\"ContentOverTime_fade-out__1Fxlz\"};"],"sourceRoot":""}